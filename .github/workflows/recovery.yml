name: Build-Patched-Recovery
on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: "Direct URL to recovery (.tar / .img / .lz4)"
        required: true
      PARTITION_SIZE:
        description: "Recovery partition size (bytes)"
        default: "67108864"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl binutils jq unzip gzip
        pipx install gdown

    # ---------- magiskboot v26.4 (asset → APK fallback) -------------------
    - name: Get magiskboot
      run: |
        set -euo pipefail
        TAG=v26.4
        ASSET=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/tags/$TAG |
                 jq -r '.assets[] | select(.name=="magiskboot") | .browser_download_url')
        if [ -n "$ASSET" ]; then
          curl -Lf --retry 3 -o magiskboot "$ASSET"
        else
          APK=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/tags/$TAG |
                jq -r '.assets[] | select(.name|test("Magisk.*\\.apk")) | .browser_download_url')
          curl -Lf --retry 3 -o magisk.apk "$APK"
          unzip -p magisk.apk lib/arm64-v8a/libmagiskboot.so > magiskboot
          rm magisk.apk
        fi
        chmod +x magiskboot
        strip --strip-all magiskboot || true

    # ---------- avbtool from Dropbox → mirrors fallback -------------------
    - name: Ensure avbtool
      run: |
        set -euo pipefail
        DROPBOX="https://dl.dropboxusercontent.com/scl/fo/3mfhvotxmp2fkgdm2o1ek/ADZeuBtD1Y-LHoTtixAYLAk?rlkey=0bdt0ptxq0c5umsx9l3a4x35i&dl=1"
        if curl -Lf --retry 3 -o avb.zip "$DROPBOX" ; then
          unzip -j avb.zip "*/avbtool.py" -d . 2>/dev/null && mv avbtool.py avbtool
          chmod +x avbtool
          rm avb.zip
        fi
        mirrors=(
          "https://raw.githubusercontent.com/LineageOS/android_external_avb/lineage-21.0/avbtool.py"
          "https://raw.githubusercontent.com/GrapheneOS/platform_external_avb/aosp-14.0/avbtool.py"
          "https://raw.githubusercontent.com/ArrowOS/android_external_avb/arrow-14.0/avbtool.py"
          "https://android.googlesource.com/platform/external/avb/+/refs/heads/master/avbtool.py?format=TEXT"
        )
        if ! grep -q cmd_set_hashtype avbtool 2>/dev/null ; then
          for u in "${mirrors[@]}"; do
            echo "→ trying $u"
            if curl -Lf --retry 2 "$u" | { grep -q '^H4s' && base64 -d | gunzip -c || cat; } > avbtool.tmp ; then
              mv avbtool.tmp avbtool
              chmod +x avbtool
              grep -q cmd_set_hashtype avbtool && break
            fi
          done
        fi
        grep -q cmd_set_hashtype avbtool || { echo "✖ cannot fetch modern avbtool"; exit 22; }
        echo "✓ avbtool ready"

    - run: openssl genrsa -out avb.pem 4096

    # ---------- (rest of the workflow unchanged) --------------------------
    # download recovery, patch, footer, package ...
