# -----------------------------------------------------------------
# Samsung Galaxy S10 5G (SM-G977B) fastbootd-TWRP build pipeline
# -----------------------------------------------------------------
name: Build-Patched-Recovery

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: Direct URL to base recovery (.tar/.img/.lz4)
        default: https://dl.twrp.me/beyondx/twrp-3.7.0_9-1-beyondx.img.tar
      PARTITION_SIZE:
        description: Recovery partition size in bytes
        default: "67108864"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FORK_TOOLS: https://raw.githubusercontent.com/${{ github.repository }}/main
      UPSTREAM_TOOLS: https://raw.githubusercontent.com/Johx22/Patch-Recovery/master
      REQ_FILES: magiskboot avbtool script1.sh script2.sh vbmeta_disabled_R.tar

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl coreutils
        pipx install gdown

    # --------------------------------------------------------------
    # Fetch tools; transparently upgrade avbtool if it lacks SHA-1
    # --------------------------------------------------------------
    - name: Fetch helper tools + scripts
      run: |
        set -euo pipefail
        for f in $REQ_FILES; do
          curl -fsSL -o "$f" "$FORK_TOOLS/$f" \
          || curl -fsSL -o "$f" "$UPSTREAM_TOOLS/$f" \
          || { echo "$f missing"; exit 99; }
          chmod +x "$f" || true
        done

        if ! grep -q "cmd_set_hashtype" avbtool; then
          echo "Upgrading avbtool to AOSP tipâ€¦"
          tmp=$(mktemp)
          ( curl -fsSL \
              https://android.googlesource.com/platform/external/avb/+/refs/heads/master/avbtool?format=TEXT \
           || curl -fsSL \
              https://raw.githubusercontent.com/PixelExperience/external_avb/master/avbtool.py ) >"$tmp.b64" \
          || { echo "avbtool download failed"; exit 22; }
          tail -n +2 "$tmp.b64" | base64 -d > avbtool
          chmod +x avbtool
          rm -f "$tmp.b64"
        fi

    - name: Generate AVB key
      run: openssl genrsa -out avb.pem 4096

    - name: Download recovery base
      run: |
        set -euo pipefail
        mkdir _dl && cd _dl
        url="$(printf '%s' "${{ github.event.inputs.RECOVERY_URL }}" | tr -d '\r\n')"
        if echo "$url" | grep -q 'dropbox.com'; then
          url="${url//www.dropbox.com/dl.dropboxusercontent.com}"
          url="${url/&dl=0/&dl=1}"
        fi
        if echo "$url" | grep -q 'drive.google.com'; then
          gdown --fuzzy "$url" -O in.bin
        else
          curl -Lf --retry 5 --retry-all-errors -o in.bin "$url"
        fi
        file in.bin | grep -qE 'HTML|ASCII' && { echo "HTML received"; exit 86; }

    - run: cd _dl && ../script1.sh       # fastbootd patch
    - run: cd _dl && ../script2.sh       # fstab clean

    - name: Switch AVB hash to SHA-1
      run: cd _dl && ../avbtool set_hashtype sha1 recovery.img

    - name: Add AVB footer
      run: |
        set -euo pipefail
        cd _dl
        SIZE="${{ github.event.inputs.PARTITION_SIZE }}"
        ../avbtool add_hash_footer \
          --partition_name recovery \
          --partition_size "$SIZE" \
          --image recovery.img \
          --key ../avb.pem \
          --algorithm SHA1_RSA4096
        [ "$(stat -c%s recovery.img)" -le "$SIZE" ] || { echo "Image too large"; exit 88; }

    - name: Package Odin tar & checksums
      run: |
        set -euo pipefail
        OUT="$GITHUB_WORKSPACE/output"
        mkdir -p "$OUT"
        cp _dl/recovery.img "$OUT/"
        tar -C "$OUT" -cf "$OUT/fastbootd-recovery.tar" recovery.img
        md5sum -t "$OUT/fastbootd-recovery.tar" >> "$OUT/fastbootd-recovery.tar"
        mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"
        cp vbmeta_disabled_R.tar "$OUT/" || true

    - uses: actions/upload-artifact@v4
      with:
        name: Patched-Recovery
        path: output/*
