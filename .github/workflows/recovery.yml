name: Build-Patched-Recovery

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: "Direct URL to recovery (.tar / .img / .lz4)"
        required: true
      PARTITION_SIZE:
        description: "Recovery-partition size (bytes)"
        default: "67108864"   # 64 MiB

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # ---------- tool-chain -------------------------------------------------
    - name: Install deps
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl binutils jq unzip
        pipx install gdown

    # ---------- real magiskboot v26.4  (asset → APK fallback) -------------
    - name: Get magiskboot
      run: |
        set -euo pipefail
        TAG=v26.4
        ASSET=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/tags/$TAG \
                 | jq -r '.assets[] | select(.name=="magiskboot") | .browser_download_url')
        if [ -n "$ASSET" ]; then
          echo "→ downloading magiskboot asset"
          curl -Lf --retry 3 -o magiskboot "$ASSET"
        else
          echo "→ asset missing, extracting from APK"
          APK=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/tags/$TAG \
                 | jq -r '.assets[] | select(.name|test("Magisk.*\\.apk")) | .browser_download_url')
          curl -Lf --retry 3 -o magisk.apk "$APK"
          unzip -p magisk.apk lib/arm64-v8a/libmagiskboot.so > magiskboot
          rm magisk.apk
        fi
        chmod +x magiskboot
        strip --strip-all magiskboot || true         # keep final image <64 MiB

    # ---------- modern avbtool (3-mirror fallback) ------------------------
    - name: Ensure avbtool
      run: |
        set -euo pipefail
        urls=(
          "https://raw.githubusercontent.com/LineageOS/android_external_avb/lineage-21.0/avbtool.py"
          "https://raw.githubusercontent.com/GrapheneOS/platform_external_avb/android13/avbtool.py"
          "https://android.googlesource.com/platform/external/avb/+/refs/heads/master/avbtool.py?format=TEXT"
        )
        for u in "${urls[@]}"; do
          echo "→ trying $u"
          if curl -Lf --retry 2 "$u" | { grep -q '^H4s' && base64 -d || cat; } > avbtool.tmp ; then
            mv avbtool.tmp avbtool
            chmod +x avbtool
            grep -q cmd_set_hashtype avbtool && break
          fi
        done
        grep -q cmd_set_hashtype avbtool || { echo "✖ cannot fetch modern avbtool"; exit 22; }
        echo "✓ avbtool ready"

    - run: openssl genrsa -out avb.pem 4096

    # ---------- download base recovery (HTML guard) -----------------------
    - name: Download recovery
      run: |
        set -euo pipefail
        mkdir _dl && cd _dl
        URL="${{ github.event.inputs.RECOVERY_URL }}"
        [[ "$URL" == *dropbox.com* ]] && URL="${URL//www.dropbox.com/dl.dropboxusercontent.com}&dl=1"
        if [[ "$URL" == *drive.google.com* ]]; then
          gdown --fuzzy "$URL" -O in.bin
        else
          curl -Lf --retry 5 --retry-all-errors -o in.bin "$URL"
        fi
        file in.bin | grep -qE 'HTML|ASCII' && { echo "HTML received"; exit 86; }

    # ---------- patch ------------------------------------------------------
    - run: cd _dl && ../script1.sh            # fastbootd patch
    - run: cd _dl && ../script2.sh            # fstab clean
    - run: cd _dl && ../avbtool set_hashtype sha1 recovery.img

    # ---------- footer + 64 MiB guard -------------------------------------
    - name: Add AVB footer
      run: |
        cd _dl
        SIZE="${{ github.event.inputs.PARTITION_SIZE }}"
        ../avbtool add_hash_footer \
          --partition_name recovery \
          --partition_size "$SIZE" \
          --image recovery.img \
          --key ../avb.pem \
          --algorithm SHA1_RSA4096
        [ $(stat -c%s recovery.img) -le "$SIZE" ] || { echo "Image too large"; exit 88; }

    # ---------- package artefacts -----------------------------------------
    - name: Package Odin tar
      run: |
        OUT=$GITHUB_WORKSPACE/output && mkdir -p "$OUT"
        cp _dl/recovery.img "$OUT/"
        tar -C "$OUT" -cf "$OUT/fastbootd-recovery.tar" recovery.img
        md5sum -t "$OUT/fastbootd-recovery.tar" >> "$OUT/fastbootd-recovery.tar"
        mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"

    - uses: actions/upload-artifact@v4
      with:
        name: Patched-Recovery
        path: output/*
