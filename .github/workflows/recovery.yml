# -----------------------------------------------------------------
# Samsung Galaxy S10 5G (SM-G977B) fastbootd-TWRP build pipeline
# Exit codes:
#   86 HTML / ASCII instead of binary          87 not a bootimg
#   88 size > PARTITION_SIZE                  89 SHA-256 mismatch (src)
#   90 SHA-256 mismatch (patched)
#   99 helper-tool missing
# -----------------------------------------------------------------
name: Build-Patched-Recovery

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: "Direct URL to base recovery (.tar/.img/.lz4)"
        default: "https://dl.twrp.me/beyondx/twrp-3.7.0_9-1-beyondx.img.tar"
      PARTITION_SIZE:
        description: "Recovery partition size in bytes"
        default: "67108864"
  push:
    paths:
      - ".github/workflows/recovery.yml"
      - "*.sh"
      - "*.sha256"
  pull_request:
    paths:
      - ".github/workflows/recovery.yml"
      - "*.sh"
      - "*.sha256"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FORK_TOOLS: "https://raw.githubusercontent.com/${{ github.repository }}/main"
      UPSTREAM_TOOLS: "https://raw.githubusercontent.com/Johx22/Patch-Recovery/master"
      REQ_FILES: "magiskboot avbtool script1.sh script2.sh vbmeta_disabled_R.tar"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl wget lz4 tar file openssl
          pipx install gdown

      - name: Fetch helper tools + scripts
        run: |
          set -euo pipefail
          for f in $REQ_FILES; do
            curl -fsSL -o "$f" "$FORK_TOOLS/$f" || \
            curl -fsSL -o "$f" "$UPSTREAM_TOOLS/$f" || { echo "$f missing"; exit 99; }
            chmod +x "$f" || true
          done

      - name: Generate AVB key
        run: openssl genrsa -out avb.pem 4096

      - name: Download recovery base
        run: |
          set -euo pipefail
          mkdir _dl && cd _dl
          url="$(printf '%s' "${{ github.event.inputs.RECOVERY_URL }}" | tr -d '\r\n')"

          # Dropbox â†’ direct
          if echo "$url" | grep -q 'dropbox.com'; then
            url="${url//www.dropbox.com/dl.dropboxusercontent.com}"
            url="${url/&dl=0/&dl=1}"
          fi

          # Google Drive
          if echo "$url" | grep -q 'drive.google.com'; then
            gdown --fuzzy "$url" -O in.bin
          else
            curl -Lf --retry 5 --retry-all-errors -o in.bin "$url"
          fi

          file in.bin | grep -qE 'HTML|ASCII' && { echo "HTML received"; exit 86; }
          echo "$url" > ../final.url

      - name: Verify download SHA-256 (optional)
        if: ${{ hashFiles('input.sha256') != '' }}
        run: |
          set -euo pipefail
          cd _dl
          EXPECT=$(awk '{print $1}' ../input.sha256)
          ACTUAL=$(sha256sum in.bin | awk '{print $1}')
          [ "$EXPECT" = "$ACTUAL" ] || { echo "SHA-256 mismatch"; exit 89; }

      - name: Extract image
        run: |
          set -euo pipefail
          cd _dl
          if file in.bin | grep -q 'tar archive'; then
            tar -xf in.bin
            img=$(ls *.img* | head -n1)
          else
            img=in.bin
          fi
          case "$img" in
            *.lz4) lz4 -d "$img" recovery.img ;;
            *)     mv "$img" recovery.img ;;
          esac

      - name: Patch ramdisk (fastbootd)
        run: cd _dl && ../script1.sh

      - name: Clean fstab (verity/avb flags)
        run: cd _dl && ../script2.sh

      - name: Switch AVB hash type to SHA-1
        run: |
          set -euo pipefail
          cd _dl
          ../avbtool set_hashtype sha1 recovery.img

      - name: Add AVB footer
        run: |
          set -euo pipefail
          cd _dl
          SIZE="${{ github.event.inputs.PARTITION_SIZE }}"
          ../avbtool add_hash_footer \
            --partition_name recovery \
            --partition_size "$SIZE" \
            --image recovery.img \
            --key ../avb.pem \
            --algorithm SHA1_RSA4096
          [ "$(stat -c%s recovery.img)" -le "$SIZE" ] || { echo "Image too large"; exit 88; }

      - name: Verify patched image SHA-256 (optional)
        if: ${{ hashFiles('recovery.sha256') != '' }}
        run: |
          set -euo pipefail
          cd _dl
          EXPECT=$(awk '{print $1}' ../recovery.sha256)
          ACTUAL=$(sha256sum recovery.img | awk '{print $1}')
          [ "$EXPECT" = "$ACTUAL" ] || { echo "Patched SHA-256 mismatch"; exit 90; }

      - name: Self-test boot-image signature
        run: |
          set -euo pipefail
          cd _dl
          file recovery.img | grep -q 'Android bootimg' || { echo "Not a bootimg"; exit 87; }

      - name: Package Odin tar and checksums
        run: |
          set -euo pipefail
          OUT="${{ github.workspace }}/output"
          mkdir -p "$OUT"
          cp _dl/recovery.img "$OUT/"
          tar -C "$OUT" -cf "$OUT/fastbootd-recovery.tar" recovery.img
          md5sum -t "$OUT/fastbootd-recovery.tar" >> "$OUT/fastbootd-recovery.tar"
          mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"
          cp vbmeta_disabled_R.tar "$OUT/" || true
          cp final.url input.sha256 recovery.sha256 "$OUT/" 2>/dev/null || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Patched-Recovery
          path: output/*
