name: RECOVERY   # Build fastbootd-enabled TWRP + vbmeta helper

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: 'Direct URL to base recovery (.img / .img.lz4 / .img.tar / .tar.md5)'
        required: true
      PARTITION_SIZE:
        description: 'Recovery partition size in bytes (SM-G977B = 67108864)'
        required: false
        default: '67108864'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 0 ── Repo checkout
    - uses: actions/checkout@v4

    # 1 ── Toolchain
    - uses: actions/setup-python@v5
      with: { python-version: '3.x' }

    - name: Install packages
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl
        python -m pip install --upgrade pip
        pip install --no-cache-dir gdown

    # 2 ── Ensure patch tools (fetch from upstream if missing)
    - name: Fetch magiskboot / avbtool / scripts
      run: |
        set -euo pipefail
        upstream=https://raw.githubusercontent.com/Johx22/Patch-Recovery/master
        for f in magiskboot avbtool script1.sh script2.sh vbmeta_disabled_R.tar; do
          [ -e "$f" ] || curl -Ls -o "$f" "$upstream/$f"
        done
        chmod +x magiskboot avbtool script1.sh script2.sh
        # Generate local RSA-4096 key for AVB footer
        openssl genrsa -out avb.pem 4096

    # 3 ── Download recovery (Dropbox/Drive/TWRP safe)
    - name: Download base image
      id: fetch
      env:
        URL: ${{ github.event.inputs.RECOVERY_URL }}
      run: |
        set -euo pipefail
        mkdir -p _dl && cd _dl
        url="$URL"

        # TWRP file-page → real file
        url=$(echo "$url" | sed -E 's/\.img(\.tar)?\.html$/\.img\1/')

        # Dropbox → binary host
        if echo "$url" | grep -qi 'dropbox.com'; then
          url="${url//www.dropbox.com/dl.dropboxusercontent.com}"
          url="${url/&dl=0/&dl=1}"
        fi

        # Drive via gdown; others via curl
        if echo "$url" | grep -qiE 'drive\.google\.com|drive\.usercontent|/open\?id='; then
          gdown --fuzzy "$url" -O in.bin
        else
          curl -L --fail --retry 5 --retry-all-errors -o in.bin "$url"
        fi

        file in.bin | grep -qiE 'HTML|ASCII text|XML' && { echo "Bad link (HTML)"; exit 86; }
        sha256sum in.bin > input.sha256

    # 4 ── Turn whatever we got into recovery.img
    - name: Extract & decompress
      run: |
        set -euo pipefail
        cd _dl
        if file in.bin | grep -q 'tar archive'; then
          tar -xf in.bin
          img=$(ls *.img* | head -n1)
        else
          img=in.bin
        fi
        case "$img" in *.lz4) lz4 -d "$img" recovery.img ;; *) mv "$img" recovery.img ;; esac
        test -s recovery.img
        sha256sum recovery.img > recovery.sha256

    # 5 ── Patch & add AVB footer (size-guarded)
    - name: Patch recovery / add hash footer
      env:
        SIZE: ${{ github.event.inputs.PARTITION_SIZE }}
      run: |
        set -euo pipefail
        cd _dl

        # Copy tools here (works even if repo is renamed)
        for f in magiskboot avbtool script1.sh script2.sh avb.pem; do
          cp "$GITHUB_WORKSPACE/$f" .
        done
        chmod +x magiskboot avbtool script1.sh script2.sh

        ./script1.sh || true
        ./script2.sh || true

        python3 avbtool add_hash_footer \
          --partition_name recovery \
          --partition_size "$SIZE" \
          --image recovery.img \
          --key avb.pem \
          --algorithm SHA256_RSA4096

        actual=$(wc -c < recovery.img)
        [ "$actual" -le "$SIZE" ] || { echo "Image exceeds partition"; exit 88; }

    # 6 ── Pack Odin tar.md5 + vbmeta helper
    - name: Create Odin package
      run: |
        set -euo pipefail
        OUT=$GITHUB_WORKSPACE/output
        mkdir -p "$OUT"
        cp _dl/recovery.img "$OUT/"
        tar -C "$OUT" -cvf "$OUT/fastbootd-recovery.tar" recovery.img
        ( cd "$OUT" && md5sum -t fastbootd-recovery.tar >> fastbootd-recovery.tar )
        mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"
        cp vbmeta_disabled_R.tar "$OUT/" || true

    # 7 ── Upload artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: Patched-Recovery
        path: ${{ github.workspace }}/output/*

    # 8 ── Always upload debug files (headers, SHA, etc.)
    - if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Debug-Download-Bundle
        path: ${{ github.workspace }}/_dl/*
