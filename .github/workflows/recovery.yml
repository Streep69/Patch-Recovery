name: RECOVERY

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: 'Direct URL to base recovery (.img | .img.lz4 | .img.tar | .tar.md5)'
        required: false
        default: 'https://dl.dropboxusercontent.com/scl/fi/ujl82vag0tpm2p4hk08d4/twrp-beyondx-3.3.1-100_ianmacd-1.img?rlkey=dc525gtc0y306uoemjysjkh7l&dl=1'
      PARTITION_SIZE:
        description: 'Recovery partition size in bytes (S10 5G = 67108864)'
        required: false
        default: '67108864'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: { python-version: '3.x' }

    - name: Install packages
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl
        pip install --no-cache-dir gdown

    # ─────────────────────────── Patch tools (Fix B) ────────────────────────────
    - name: Get patch tools
      run: |
        set -euo pipefail
        upstream=https://raw.githubusercontent.com/Johx22/Patch-Recovery/master
        mkdir -p tools
        for f in magiskboot avbtool script1.sh script2.sh vbmeta_disabled_R.tar; do
          curl -Ls --fail -o "tools/$f" "$upstream/$f"
        done
        chmod +x tools/magiskboot tools/avbtool tools/script1.sh tools/script2.sh
        openssl genrsa -out tools/avb.pem 4096

    # ─────────────────────── Download base recovery image ──────────────────────
    - name: Download recovery
      env: { URL: ${{ github.event.inputs.RECOVERY_URL }} }
      run: |
        set -euo pipefail
        mkdir -p _dl && cd _dl
        url="$URL"
        # Dropbox → direct
        url="${url//www.dropbox.com/dl.dropboxusercontent.com}"
        url="${url/&dl=0/&dl=1}"
        # TWRP page → file
        url=$(echo "$url" | sed -E 's/\.img(\.tar)?\.html$/\.img\1/')
        echo "URL: $url"
        if echo "$url" | grep -q 'drive.google'; then
          gdown --fuzzy "$url" -O in.bin
        else
          curl -L --fail --retry 5 --retry-all-errors -o in.bin "$url"
        fi
        file in.bin | grep -qE 'HTML|ASCII' && { echo "Bad link"; exit 86; }

    # ─────────────────────── Untar / unlz4 → recovery.img ──────────────────────
    - name: Normalize image
      run: |
        set -euo pipefail
        cd _dl
        if file in.bin | grep -q 'tar archive'; then
          tar -xf in.bin
          img=$(ls *.img* | head -n1)
        else
          img=in.bin
        fi
        case "$img" in *.lz4) lz4 -d "$img" recovery.img ;; *) mv "$img" recovery.img ;; esac
        sha256sum recovery.img

    # ───────────────────────── Patch + AVB footer ──────────────────────────────
    - name: Patch & sign
      env:
        SIZE: ${{ github.event.inputs.PARTITION_SIZE }}
      run: |
        set -euo pipefail
        cd _dl
        cp ../tools/* .
        ./script1.sh || true
        ./script2.sh || true
        python3 avbtool add_hash_footer \
          --partition_name recovery \
          --partition_size "$SIZE" \
          --image recovery.img --key avb.pem --algorithm SHA256_RSA4096
        [ $(wc -c < recovery.img) -le "$SIZE" ] || { echo "Image too big"; exit 88; }

    # ───────────────────────── Odin tar + artifact ─────────────────────────────
    - name: Package Odin tar
      run: |
        OUT=${{ github.workspace }}/output
        mkdir -p "$OUT"
        cp _dl/recovery.img "$OUT/"
        tar -C "$OUT" -cvf "$OUT/fastbootd-recovery.tar" recovery.img
        ( cd "$OUT" && md5sum -t fastbootd-recovery.tar >> fastbootd-recovery.tar )
        mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"
        cp tools/vbmeta_disabled_R.tar "$OUT/"

    - uses: actions/upload-artifact@v4
      with:
        name: Patched-Recovery
        path: ${{ github.workspace }}/output/*
