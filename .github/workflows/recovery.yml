name: RECOVERY

on:
  workflow_dispatch:
    inputs:
      RECOVERY_URL:
        description: 'Direct link to base recovery (img / img.lz4 / img.tar / tar.md5)'
        required: false
        default: 'https://dl.dropboxusercontent.com/scl/fi/ujl82vag0tpm2p4hk08d4/twrp-beyondx-3.3.1-100_ianmacd-1.img?rlkey=dc525gtc0y306uoemjysjkh7l&dl=1'

      PARTITION_SIZE:
        description: 'Recovery partition size in bytes (beyondx = 67108864)'
        required: false
        default: '67108864'   # 64 MiB

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # — 0.  Check out repo —
    - uses: actions/checkout@v4

    # — 1.  Toolchain —
    - uses: actions/setup-python@v5
      with: { python-version: '3.x' }

    - name: Install packages
      run: |
        sudo apt-get update -y
        sudo apt-get install -y curl wget lz4 tar file openssl
        python -m pip install --upgrade pip
        pip install --no-cache-dir gdown

    # — 2.  Pull patch tools if they’re missing —
    - name: Fetch magiskboot / avbtool / scripts
      run: |
        set -euo pipefail
        upstream=https://raw.githubusercontent.com/Johx22/Patch-Recovery/master
        for f in magiskboot avbtool script1.sh script2.sh vbmeta_disabled_R.tar; do
          test -e "$f" || curl -Ls -o "$f" "$upstream/$f"
        done
        chmod +x magiskboot avbtool script1.sh script2.sh
        openssl genrsa -out avb.pem 4096

    # — 3.  Download base image —
    - name: Download recovery
      id: dl
      env:
        URL: ${{ github.event.inputs.RECOVERY_URL || inputs.RECOVERY_URL }}
      run: |
        set -euo pipefail
        mkdir -p _dl && cd _dl
        url="$URL"

        # Normalize Dropbox → direct binary
        if echo "$url" | grep -qi 'dropbox.com'; then
          url="${url//www.dropbox.com/dl.dropboxusercontent.com}"
          url="${url/&dl=0/&dl=1}"
        fi

        # Handle Drive via gdown; everything else via curl
        if echo "$url" | grep -qiE 'drive\.google\.com|drive\.usercontent\.google\.com|/open\?id='; then
          gdown --fuzzy "$url" -O in.bin
        else
          curl -L --fail --retry 5 --retry-all-errors -o in.bin "$url"
        fi

        # Abort if HTML
        file in.bin | grep -qE 'HTML|ASCII text' && { echo "Bad link (HTML)"; exit 86; }

    # — 4.  Untar / unlz4 so we have recovery.img —
    - name: Normalize image
      run: |
        set -euo pipefail
        cd _dl
        if file in.bin | grep -q 'tar archive'; then
          tar -xf in.bin
          img=$(ls *.img* | head -n1)
        else
          img=in.bin
        fi
        case "$img" in *.lz4) lz4 -d "$img" recovery.img ;; *) mv "$img" recovery.img ;; esac
        test -s recovery.img

    # — 5.  Patch & AVB footer —
    - name: Patch
      env: {SIZE: ${{ github.event.inputs.PARTITION_SIZE }}}
      run: |
        set -euo pipefail
        cd _dl
        ../script1.sh || true
        ../script2.sh || true
        python3 ../avbtool add_hash_footer \
          --partition_name recovery --partition_size $SIZE \
          --image recovery.img --key ../avb.pem --algorithm SHA256_RSA4096
        sha256sum recovery.img

    # — 6.  Pack Odin tar —
    - name: Package Odin tar.md5
      run: |
        set -euo pipefail
        OUT=$GITHUB_WORKSPACE/output
        mkdir -p "$OUT"
        cp _dl/recovery.img "$OUT/"
        tar -C "$OUT" -cvf "$OUT/fastbootd-recovery.tar" recovery.img
        ( cd "$OUT" && md5sum -t fastbootd-recovery.tar >> fastbootd-recovery.tar )
        mv "$OUT/fastbootd-recovery.tar" "$OUT/fastbootd-recovery.tar.md5"
        cp vbmeta_disabled_R.tar "$OUT/" || true

    # — 7.  Publish artifacts —
    - uses: actions/upload-artifact@v4
      with:
        name: Patched-Recovery
        path: ${{ github.workspace }}/output/*
